#ifndef EXR_TASK_ALGORITHM_EXPLOITREPAIR_HH_
#define EXR_TASK_ALGORITHM_EXPLOITREPAIR_HH_

#include <memory>

#include "task/algorithm/route_calculator.hh"
#include "util/typedef.hh"
#include "util/types.hh"

namespace exr {

/* Using exploit repair's algorithm to arrange the repair routes */
class ExploitRepair : public RouteCalculator
{
 public:
  ExploitRepair(const Count &k, const Count &num, const Count &rid,
                const Count &task_num, const Path &bw_path);
  ~ExploitRepair();

  Count GetTaskNumber(const Count &gid) override;
  void FillTask(const Count &gid, const Count &tid, const Count &node_id,
                RepairTask &rt, Count *src_ids) override;
  BwType get_capacity() override;

  //ExploitRepair is neither copyable nor movable
  ExploitRepair(const ExploitRepair&) = delete;
  ExploitRepair& operator=(const ExploitRepair&) = delete;

 protected:
  Count CalculateRoute(const Bandwidth *bws, const Count &rid) override;

 private:
  Count k_;
  Count num_;
  std::unique_ptr<Bandwidth[]> bandwidths_;
  std::unique_ptr<Bandwidth[]> raw_bandwidths_;

  Count task_num_;
  BwType max_bw_;
  BwType base_;
  bool is_upload_limit_;

  std::unique_ptr<bool[]> nodes_;
  std::unique_ptr<Count[]> tasks_;

  void AnalyzeBandwidth_();
  bool DistributeTasks_();
  bool AddAMatch_(const Count &request_id, Count cur_match);
};

} // namespace exr

#endif // EXR_TASK_ALGORITHM_EXPLOITREPAIR_HH_
